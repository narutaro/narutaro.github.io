---
title: "Searching for an Item With Apollo"
date: 2021-07-04T11:29:41+09:00
tags: ["graphql", "apollo", "javascript"]
draft: false
---

# Introduction

[Last time](https://zenn.dev/masaino/articles/c3316ab56413e3) was to get list of todo from Apollo. This time I am going to search for the item by id. 


# Code

```js
const { ApolloServer, gql } = require('apollo-server');

const typeDefs = gql`
  type Task {
    id: ID!
    name: String!
    isActive: Boolean!
    createdAt: Int
    updatedAt: Int
    owner: String
  }

  type Query {
    tasks: [Task]
    task(id: ID!): Task # ‚ù∂
  }
`;

const tasks = [
  { id: 1, name: "Soak in an Onsen", isActive: true},
  { id: 2, name: "Sing Karaoke", isActive: false},
  { id: 3, name: "See cherry blossom", isActive: true},
]

const resolvers = {
  Query: {
    tasks: () => tasks,
    task (parent, args, context, info) { // ‚ù∑
      const { id } = args;
      return context.db.find((task) => task.id == id)
    }
  },
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: { db: tasks } // ‚ù∏
});

server.listen().then(({ url }) => {
  console.log(`üöÄ  Server ready at ${url}`);
});
```

The changes from the previous one is as follows:
 
1. Add Query which has an id as an argument - ‚ù∂.
2. Add the resolver `task` which corresponds to ‚ù∂. Add function which search for the id in the list. 
3. Set `tasks` as the database. The search in ‚ù∑ can simply be `tasks.find()` but setting db in `context` seems "Apollo way". I use in-memory database this time so `find()` works. In case the databse is relational database, the query will probably be `context.db.query('SELECT * FROM table_name');`


# Query

In addition to this query we had:

```json
{
  tasks {
    id
    name
  }
}
```

Now, we have new query which can specify an id:

```json
{
  task(id: 2){
    id
    name
  }
}
```

The return of the query is:

```json
{
  "data": {
    "task": {
      "id": 2,
      "name": "Sing Karaoke",
      "isActive": false
    }
  }
}
```

I see, I'm beginning to understand the development cycle. You repeat schema update and the resolver update as you have a new query. 


# Next step

Next step is add, delete and update the list. `Mutation` comes in. 

# Reference

[GraphQL Search and Filter ‚Äì How to search and filter results with GraphQL](https://www.apollographql.com/blog/graphql-search-and-filter-how-to-search-and-filter-results-with-graphql/)


